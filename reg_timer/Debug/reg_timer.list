
reg_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000308  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004cc  080004d4  000014d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004cc  080004cc  000014d4  2**0
                  CONTENTS
  4 .ARM          00000000  080004cc  080004cc  000014d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004cc  080004d4  000014d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004cc  080004cc  000014cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004d0  080004d0  000014d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004d4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004d4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000053e  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000159  00000000  00000000  00001a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00001ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004b  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000000c9  00000000  00000000  00001c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006fc  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a9de  00000000  00000000  00002420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008cdfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000104  00000000  00000000  0008ce44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003a  00000000  00000000  0008cf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004b4 	.word	0x080004b4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080004b4 	.word	0x080004b4

08000204 <sysclkConfig>:
 * flash latency = 5ws
 */


void sysclkConfig(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	RCC->CR |= 1<<16;
 8000208:	4b2d      	ldr	r3, [pc, #180]	@ (80002c0 <sysclkConfig+0xbc>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a2c      	ldr	r2, [pc, #176]	@ (80002c0 <sysclkConfig+0xbc>)
 800020e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000212:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & 1<<17));
 8000214:	bf00      	nop
 8000216:	4b2a      	ldr	r3, [pc, #168]	@ (80002c0 <sysclkConfig+0xbc>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800021e:	2b00      	cmp	r3, #0
 8000220:	d0f9      	beq.n	8000216 <sysclkConfig+0x12>

	RCC->APB1ENR |= 1<<28;
 8000222:	4b27      	ldr	r3, [pc, #156]	@ (80002c0 <sysclkConfig+0xbc>)
 8000224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000226:	4a26      	ldr	r2, [pc, #152]	@ (80002c0 <sysclkConfig+0xbc>)
 8000228:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800022c:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->CR |= 3<<14;
 800022e:	4b24      	ldr	r3, [pc, #144]	@ (80002c0 <sysclkConfig+0xbc>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a23      	ldr	r2, [pc, #140]	@ (80002c0 <sysclkConfig+0xbc>)
 8000234:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000238:	6013      	str	r3, [r2, #0]

	FLASH->ACR |= 7<<8 | 5<<0;;
 800023a:	4b22      	ldr	r3, [pc, #136]	@ (80002c4 <sysclkConfig+0xc0>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a21      	ldr	r2, [pc, #132]	@ (80002c4 <sysclkConfig+0xc0>)
 8000240:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000244:	f043 0305 	orr.w	r3, r3, #5
 8000248:	6013      	str	r3, [r2, #0]

	RCC->CFGR |= 7<<4;
 800024a:	4b1d      	ldr	r3, [pc, #116]	@ (80002c0 <sysclkConfig+0xbc>)
 800024c:	689b      	ldr	r3, [r3, #8]
 800024e:	4a1c      	ldr	r2, [pc, #112]	@ (80002c0 <sysclkConfig+0xbc>)
 8000250:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000254:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 5<<10;
 8000256:	4b1a      	ldr	r3, [pc, #104]	@ (80002c0 <sysclkConfig+0xbc>)
 8000258:	689b      	ldr	r3, [r3, #8]
 800025a:	4a19      	ldr	r2, [pc, #100]	@ (80002c0 <sysclkConfig+0xbc>)
 800025c:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8000260:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 4<<13;
 8000262:	4b17      	ldr	r3, [pc, #92]	@ (80002c0 <sysclkConfig+0xbc>)
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	4a16      	ldr	r2, [pc, #88]	@ (80002c0 <sysclkConfig+0xbc>)
 8000268:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800026c:	6093      	str	r3, [r2, #8]

	RCC->PLLCFGR |= 4<<0 | 180<<6 | 1<<16;
 800026e:	4b14      	ldr	r3, [pc, #80]	@ (80002c0 <sysclkConfig+0xbc>)
 8000270:	685b      	ldr	r3, [r3, #4]
 8000272:	4a13      	ldr	r2, [pc, #76]	@ (80002c0 <sysclkConfig+0xbc>)
 8000274:	f443 3396 	orr.w	r3, r3, #76800	@ 0x12c00
 8000278:	f443 7382 	orr.w	r3, r3, #260	@ 0x104
 800027c:	6053      	str	r3, [r2, #4]

	RCC->CR |= 1<<24;
 800027e:	4b10      	ldr	r3, [pc, #64]	@ (80002c0 <sysclkConfig+0xbc>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a0f      	ldr	r2, [pc, #60]	@ (80002c0 <sysclkConfig+0xbc>)
 8000284:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000288:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & 1<<25));
 800028a:	bf00      	nop
 800028c:	4b0c      	ldr	r3, [pc, #48]	@ (80002c0 <sysclkConfig+0xbc>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000294:	2b00      	cmp	r3, #0
 8000296:	d0f9      	beq.n	800028c <sysclkConfig+0x88>

	RCC->CFGR |= 2<<0;
 8000298:	4b09      	ldr	r3, [pc, #36]	@ (80002c0 <sysclkConfig+0xbc>)
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	4a08      	ldr	r2, [pc, #32]	@ (80002c0 <sysclkConfig+0xbc>)
 800029e:	f043 0302 	orr.w	r3, r3, #2
 80002a2:	6093      	str	r3, [r2, #8]
	while(!(RCC->CFGR & 2<<2));
 80002a4:	bf00      	nop
 80002a6:	4b06      	ldr	r3, [pc, #24]	@ (80002c0 <sysclkConfig+0xbc>)
 80002a8:	689b      	ldr	r3, [r3, #8]
 80002aa:	f003 0308 	and.w	r3, r3, #8
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d0f9      	beq.n	80002a6 <sysclkConfig+0xa2>
}
 80002b2:	bf00      	nop
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40023800 	.word	0x40023800
 80002c4:	40023c00 	.word	0x40023c00

080002c8 <main>:
void delay(uint16_t us);
void delay_ms (uint16_t ms);
void gpioConfig(void);

int main(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	sysclkConfig();
 80002cc:	f7ff ff9a 	bl	8000204 <sysclkConfig>
	tim6Config();
 80002d0:	f000 f81a 	bl	8000308 <tim6Config>
	gpioConfig();
 80002d4:	f000 f876 	bl	80003c4 <gpioConfig>

	while(1)
	{
		GPIOA->BSRR |= 1<<5;
 80002d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000304 <main+0x3c>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a09      	ldr	r2, [pc, #36]	@ (8000304 <main+0x3c>)
 80002de:	f043 0320 	orr.w	r3, r3, #32
 80002e2:	6193      	str	r3, [r2, #24]
		delay_ms(300);
 80002e4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80002e8:	f000 f854 	bl	8000394 <delay_ms>
		GPIOA->BSRR |= (1<<5)<<16;
 80002ec:	4b05      	ldr	r3, [pc, #20]	@ (8000304 <main+0x3c>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a04      	ldr	r2, [pc, #16]	@ (8000304 <main+0x3c>)
 80002f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002f6:	6193      	str	r3, [r2, #24]
		delay_ms(100);
 80002f8:	2064      	movs	r0, #100	@ 0x64
 80002fa:	f000 f84b 	bl	8000394 <delay_ms>
		GPIOA->BSRR |= 1<<5;
 80002fe:	bf00      	nop
 8000300:	e7ea      	b.n	80002d8 <main+0x10>
 8000302:	bf00      	nop
 8000304:	40020000 	.word	0x40020000

08000308 <tim6Config>:

	}
}

void tim6Config (void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1<<4);
 800030c:	4b13      	ldr	r3, [pc, #76]	@ (800035c <tim6Config+0x54>)
 800030e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000310:	4a12      	ldr	r2, [pc, #72]	@ (800035c <tim6Config+0x54>)
 8000312:	f043 0310 	orr.w	r3, r3, #16
 8000316:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM6->PSC |= 90-1;
 8000318:	4b11      	ldr	r3, [pc, #68]	@ (8000360 <tim6Config+0x58>)
 800031a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800031c:	4a10      	ldr	r2, [pc, #64]	@ (8000360 <tim6Config+0x58>)
 800031e:	f043 0359 	orr.w	r3, r3, #89	@ 0x59
 8000322:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM6->ARR |= 0xFFFF;
 8000324:	4b0e      	ldr	r3, [pc, #56]	@ (8000360 <tim6Config+0x58>)
 8000326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000328:	4a0d      	ldr	r2, [pc, #52]	@ (8000360 <tim6Config+0x58>)
 800032a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800032e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8000332:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM6->CR1 |= (1<<0);             //counter enable
 8000334:	4b0a      	ldr	r3, [pc, #40]	@ (8000360 <tim6Config+0x58>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a09      	ldr	r2, [pc, #36]	@ (8000360 <tim6Config+0x58>)
 800033a:	f043 0301 	orr.w	r3, r3, #1
 800033e:	6013      	str	r3, [r2, #0]
	while(!(TIM6->SR & (1<<0)));     // UIF update interrupt flag
 8000340:	bf00      	nop
 8000342:	4b07      	ldr	r3, [pc, #28]	@ (8000360 <tim6Config+0x58>)
 8000344:	691b      	ldr	r3, [r3, #16]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d0f9      	beq.n	8000342 <tim6Config+0x3a>
}
 800034e:	bf00      	nop
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40023800 	.word	0x40023800
 8000360:	40001000 	.word	0x40001000

08000364 <delay_us>:

void delay_us (uint16_t us)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	80fb      	strh	r3, [r7, #6]
	TIM6->CNT =0;
 800036e:	4b08      	ldr	r3, [pc, #32]	@ (8000390 <delay_us+0x2c>)
 8000370:	2200      	movs	r2, #0
 8000372:	625a      	str	r2, [r3, #36]	@ 0x24
	while(TIM6->CNT < us);
 8000374:	bf00      	nop
 8000376:	4b06      	ldr	r3, [pc, #24]	@ (8000390 <delay_us+0x2c>)
 8000378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800037a:	88fb      	ldrh	r3, [r7, #6]
 800037c:	429a      	cmp	r2, r3
 800037e:	d3fa      	bcc.n	8000376 <delay_us+0x12>
}
 8000380:	bf00      	nop
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40001000 	.word	0x40001000

08000394 <delay_ms>:

void delay_ms (uint16_t ms)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i=0; i<ms; i++)
 800039e:	2300      	movs	r3, #0
 80003a0:	81fb      	strh	r3, [r7, #14]
 80003a2:	e006      	b.n	80003b2 <delay_ms+0x1e>
	{
		delay_us(1000);
 80003a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003a8:	f7ff ffdc 	bl	8000364 <delay_us>
	for (uint16_t i=0; i<ms; i++)
 80003ac:	89fb      	ldrh	r3, [r7, #14]
 80003ae:	3301      	adds	r3, #1
 80003b0:	81fb      	strh	r3, [r7, #14]
 80003b2:	89fa      	ldrh	r2, [r7, #14]
 80003b4:	88fb      	ldrh	r3, [r7, #6]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	d3f4      	bcc.n	80003a4 <delay_ms+0x10>
	}
}
 80003ba:	bf00      	nop
 80003bc:	bf00      	nop
 80003be:	3710      	adds	r7, #16
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <gpioConfig>:

void gpioConfig(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<0);
 80003c8:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <gpioConfig+0x4c>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003cc:	4a10      	ldr	r2, [pc, #64]	@ (8000410 <gpioConfig+0x4c>)
 80003ce:	f043 0301 	orr.w	r3, r3, #1
 80003d2:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= (1<<10);
 80003d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000414 <gpioConfig+0x50>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000414 <gpioConfig+0x50>)
 80003da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003de:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(1<<5);
 80003e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000414 <gpioConfig+0x50>)
 80003e2:	685b      	ldr	r3, [r3, #4]
 80003e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000414 <gpioConfig+0x50>)
 80003e6:	f023 0320 	bic.w	r3, r3, #32
 80003ea:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= (1<<11);
 80003ec:	4b09      	ldr	r3, [pc, #36]	@ (8000414 <gpioConfig+0x50>)
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	4a08      	ldr	r2, [pc, #32]	@ (8000414 <gpioConfig+0x50>)
 80003f2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80003f6:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~((1<<10) | (1<<11));
 80003f8:	4b06      	ldr	r3, [pc, #24]	@ (8000414 <gpioConfig+0x50>)
 80003fa:	68db      	ldr	r3, [r3, #12]
 80003fc:	4a05      	ldr	r2, [pc, #20]	@ (8000414 <gpioConfig+0x50>)
 80003fe:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000402:	60d3      	str	r3, [r2, #12]
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40023800 	.word	0x40023800
 8000414:	40020000 	.word	0x40020000

08000418 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000418:	480d      	ldr	r0, [pc, #52]	@ (8000450 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800041a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800041c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000420:	480c      	ldr	r0, [pc, #48]	@ (8000454 <LoopForever+0x6>)
  ldr r1, =_edata
 8000422:	490d      	ldr	r1, [pc, #52]	@ (8000458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000424:	4a0d      	ldr	r2, [pc, #52]	@ (800045c <LoopForever+0xe>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000428:	e002      	b.n	8000430 <LoopCopyDataInit>

0800042a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800042a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800042c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042e:	3304      	adds	r3, #4

08000430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000434:	d3f9      	bcc.n	800042a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000436:	4a0a      	ldr	r2, [pc, #40]	@ (8000460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000438:	4c0a      	ldr	r4, [pc, #40]	@ (8000464 <LoopForever+0x16>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800043c:	e001      	b.n	8000442 <LoopFillZerobss>

0800043e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000440:	3204      	adds	r2, #4

08000442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000444:	d3fb      	bcc.n	800043e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000446:	f000 f811 	bl	800046c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800044a:	f7ff ff3d 	bl	80002c8 <main>

0800044e <LoopForever>:

LoopForever:
  b LoopForever
 800044e:	e7fe      	b.n	800044e <LoopForever>
  ldr   r0, =_estack
 8000450:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000458:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800045c:	080004d4 	.word	0x080004d4
  ldr r2, =_sbss
 8000460:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000464:	2000001c 	.word	0x2000001c

08000468 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000468:	e7fe      	b.n	8000468 <ADC_IRQHandler>
	...

0800046c <__libc_init_array>:
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	4d0d      	ldr	r5, [pc, #52]	@ (80004a4 <__libc_init_array+0x38>)
 8000470:	4c0d      	ldr	r4, [pc, #52]	@ (80004a8 <__libc_init_array+0x3c>)
 8000472:	1b64      	subs	r4, r4, r5
 8000474:	10a4      	asrs	r4, r4, #2
 8000476:	2600      	movs	r6, #0
 8000478:	42a6      	cmp	r6, r4
 800047a:	d109      	bne.n	8000490 <__libc_init_array+0x24>
 800047c:	4d0b      	ldr	r5, [pc, #44]	@ (80004ac <__libc_init_array+0x40>)
 800047e:	4c0c      	ldr	r4, [pc, #48]	@ (80004b0 <__libc_init_array+0x44>)
 8000480:	f000 f818 	bl	80004b4 <_init>
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	10a4      	asrs	r4, r4, #2
 8000488:	2600      	movs	r6, #0
 800048a:	42a6      	cmp	r6, r4
 800048c:	d105      	bne.n	800049a <__libc_init_array+0x2e>
 800048e:	bd70      	pop	{r4, r5, r6, pc}
 8000490:	f855 3b04 	ldr.w	r3, [r5], #4
 8000494:	4798      	blx	r3
 8000496:	3601      	adds	r6, #1
 8000498:	e7ee      	b.n	8000478 <__libc_init_array+0xc>
 800049a:	f855 3b04 	ldr.w	r3, [r5], #4
 800049e:	4798      	blx	r3
 80004a0:	3601      	adds	r6, #1
 80004a2:	e7f2      	b.n	800048a <__libc_init_array+0x1e>
 80004a4:	080004cc 	.word	0x080004cc
 80004a8:	080004cc 	.word	0x080004cc
 80004ac:	080004cc 	.word	0x080004cc
 80004b0:	080004d0 	.word	0x080004d0

080004b4 <_init>:
 80004b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b6:	bf00      	nop
 80004b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ba:	bc08      	pop	{r3}
 80004bc:	469e      	mov	lr, r3
 80004be:	4770      	bx	lr

080004c0 <_fini>:
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c2:	bf00      	nop
 80004c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c6:	bc08      	pop	{r3}
 80004c8:	469e      	mov	lr, r3
 80004ca:	4770      	bx	lr
